import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;

public class DrawPanel extends JPanel implements ActionListener {

    private final int TIMER_DELAY;
    private Timer timer;
    private int ticksFromStart = 0;

    private List<Amogus> amogusList;
    private TrafficLight trafficLight;
    private List<Cloud> clouds;
    private List<Integer> amogusCurrentX;
    private List<Integer> amogusSpeeds;
    private List<Integer> amogusStartX;
    private List<Integer> amogusStartY;

    private int winnerIndex = -1; // –ò–Ω–¥–µ–∫—Å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    private boolean raceFinished = false; // –ì–æ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    private int finishLine; // –õ–∏–Ω–∏—è —Ñ–∏–Ω–∏—à–∞

    public DrawPanel(final int timerDelay) {
        this.TIMER_DELAY = timerDelay;
        timer = new Timer(timerDelay, this);
        timer.start();

        initializeObjects();
    }

    private void initializeObjects() {
        this.amogusList = new ArrayList<>();
        this.amogusCurrentX = new ArrayList<>();
        this.amogusSpeeds = new ArrayList<>();
        this.amogusStartX = new ArrayList<>();
        this.amogusStartY = new ArrayList<>();
        this.clouds = new ArrayList<>();

        createAmogusTeam();
        createClouds();

        this.trafficLight = new TrafficLight(getWidth() - 150, getHeight() - 320, 80, 200);
        this.finishLine = getWidth() - 200; // –§–∏–Ω–∏—à–Ω–∞—è –ª–∏–Ω–∏—è
    }

    private void createAmogusTeam() {
        amogusList.clear();
        amogusCurrentX.clear();
        amogusSpeeds.clear();
        amogusStartX.clear();
        amogusStartY.clear();

        int amogusCount = 12;
        int panelHeight = getHeight();

        // –ü–æ–¥–Ω–∏–º–∞–µ–º –∞–º–æ–≥—É—Å–æ–≤ –≤—ã—à–µ - —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞
        int columns = 4;
        int baseY = 100; // –í—ã—Å–æ–∫–∞—è –ø–æ–∑–∏—Ü–∏—è –≤–º–µ—Å—Ç–æ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏

        for (int i = 0; i < amogusCount; i++) {
            Color color = new Color(
                    (int)(Math.random() * 200 + 55),
                    (int)(Math.random() * 200 + 55),
                    (int)(Math.random() * 200 + 55)
            );

            int sizeVariation = (int)(Math.random() * 40 - 20);
            int width = 160 + sizeVariation;
            int height = 220 + sizeVariation;

            int col = i % columns;
            int row = i / columns;
            int startX = 50 + col * 100;
            int startY = baseY + row * 80; // –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –≤—ã—à–µ

            Amogus amogus = new Amogus(startX, startY, width, height, color);
            amogus.setTrafficLight(trafficLight);

            amogusList.add(amogus);
            amogusStartX.add(startX);
            amogusStartY.add(startY);
            amogusCurrentX.add(startX);
            amogusSpeeds.add((int)(Math.random() * 2 + 2));
        }

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ–Ω–∫–∏
        winnerIndex = -1;
        raceFinished = false;
    }

    private void updateAmogusPositions() {
        int panelHeight = getHeight();
        int panelWidth = getWidth();

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Å–≤–µ—Ç–æ—Ñ–æ—Ä–∞
        if (trafficLight != null) {
            trafficLight.setX(panelWidth - 150);
            trafficLight.setY(panelHeight - 420);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–Ω–∏—à–Ω—É—é –ª–∏–Ω–∏—é
        finishLine = panelWidth - 200;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∞–º–æ–≥—É—Å–æ–≤
        int columns = 4;
        int baseY = 500;
        for (int i = 0; i < amogusList.size(); i++) {
            int col = i % columns;
            int row = i / columns;
            int newStartX = 50 + col * 100;
            int newStartY = baseY + row * 80;

            amogusStartX.set(i, newStartX);
            amogusStartY.set(i, newStartY);

            if (amogusCurrentX.get(i).equals(amogusStartX.get(i))) {
                amogusCurrentX.set(i, newStartX);
                amogusList.get(i).setY(newStartY);
            }
        }
    }

    private void createClouds() {
        clouds.clear();
        int cloudCount = getWidth() / 200;

        for (int i = 0; i < cloudCount; i++) {
            int x = (int)(Math.random() * getWidth());
            int y = (int)(Math.random() * 150 + 30);
            int width = (int)(Math.random() * 60 + 40);
            int height = (int)(Math.random() * 40 + 30);
            int speed = (int)(Math.random() * 3 + 1);
            clouds.add(new Cloud(x, y, width, height, speed));
        }
    }

    @Override
    protected void paintComponent(Graphics gr) {
        super.paintComponent(gr);

        // –†–∏—Å—É–µ–º –Ω–µ–±–æ
        gr.setColor(new Color(135, 206, 235));
        gr.fillRect(0, 0, getWidth(), getHeight());

        // –†–∏—Å—É–µ–º –∑–µ–º–ª—é (—Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –≤–Ω–∏–∑—É, –∞–º–æ–≥—É—Å—ã –≤—ã—à–µ)
        gr.setColor(new Color(34, 139, 34));
        int groundHeight = getHeight() / 4;
        int groundY = getHeight() - groundHeight;
        gr.fillRect(0, groundY, getWidth(), groundHeight);

        // –¢–µ–Ω—å –¥–ª—è –æ–±—ä–µ–º–∞ –∑–µ–º–ª–∏
        for (int i = 0; i < 10; i++) {
            int alpha = 100 - i * 10;
            gr.setColor(new Color(20, 100, 20, alpha));
            gr.fillRect(0, groundY - i, getWidth(), 1);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤
        updateAmogusPositions();

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏ —Ä–∏—Å—É–µ–º –æ–±–ª–∞–∫–∞
        for (Cloud cloud : clouds) {
            cloud.update();
            if (cloud.getX() + cloud.getWidth() < 0) {
                cloud.setX(getWidth() + 50);
            }
            cloud.draw(gr);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–µ—Ç–æ—Ñ–æ—Ä
        trafficLight.update(ticksFromStart);
        trafficLight.draw(gr);

        // –î–≤–∏–≥–∞–µ–º –∞–º–æ–≥—É—Å–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        if (trafficLight.isGreenLight() && !raceFinished) {
            for (int i = 0; i < amogusList.size(); i++) {
                int newX = amogusCurrentX.get(i) + amogusSpeeds.get(i);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥ –ª–∏ –∞–º–æ–≥—É—Å —Ñ–∏–Ω–∏—à–∞
                if (newX > finishLine && winnerIndex == -1) {
                    winnerIndex = i; // –ü–µ—Ä–≤—ã–π –∞–º–æ–≥—É—Å, –¥–æ—Å—Ç–∏–≥—à–∏–π —Ñ–∏–Ω–∏—à–∞
                    raceFinished = true;
                }

                amogusCurrentX.set(i, newX);
            }
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∞–º–æ–≥—É—Å–∞–º
        for (int i = 0; i < amogusList.size(); i++) {
            amogusList.get(i).setX(amogusCurrentX.get(i));
            amogusList.get(i).setY(amogusStartY.get(i));
        }

        // –†–∏—Å—É–µ–º –≤—Å–µ—Ö –∞–º–æ–≥—É—Å–æ–≤
        for (Amogus amogus : amogusList) {
            amogus.draw(gr);
        }

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–Ω–∫–µ
        gr.setColor(Color.BLACK);
        gr.setFont(new Font("Arial", Font.BOLD, 16));

        if (raceFinished && winnerIndex != -1) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
            Color winnerColor = amogusList.get(winnerIndex).getColor();
            gr.setColor(winnerColor);
            gr.drawString("üèÜ –ü–û–ë–ï–î–ò–¢–ï–õ–¨: –ê–º–æ–≥—É—Å " + (winnerIndex + 1) + "! üèÜ",
                    getWidth() / 2 - 150, 50);

            // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
            Amogus winner = amogusList.get(winnerIndex);
            gr.setColor(new Color(255, 215, 0, 100)); // –ó–æ–ª–æ—Ç–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞
            gr.fillOval(winner.getX() - 10, winner.getY() - 10,
                    winner.getWidth() + 20, winner.getHeight() + 50);
        } else if (trafficLight.isGreenLight()) {
            gr.setColor(Color.GREEN);
            gr.drawString("–ì–û–ù–ö–ê –ò–î–ï–¢! –ó–ï–õ–ï–ù–´–ô –°–í–ï–¢!", getWidth() / 2 - 100, 50);
        } else {
            gr.setColor(Color.RED);
            gr.drawString("–ñ–î–ï–ú –ó–ï–õ–ï–ù–û–ì–û –°–í–ï–¢–ê...", getWidth() / 2 - 100, 50);
        }

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        gr.setColor(Color.BLACK);
        gr.setFont(new Font("Arial", Font.PLAIN, 12));
        gr.drawString("–ê–º–æ–≥—É—Å–æ–≤ –≤ –≥–æ–Ω–∫–µ: " + amogusList.size(), 10, 20);
        if (winnerIndex != -1) {
            gr.drawString("–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω! –ù–∞–∂–º–∏—Ç–µ F5 –¥–ª—è –Ω–æ–≤–æ–π –≥–æ–Ω–∫–∏", 10, 35);
        }
    }

    @Override
    public void actionPerformed(final ActionEvent e) {
        if (e.getSource() == timer) {
            repaint();
            ++ticksFromStart;
        }
    }

    public void onResize() {
        createClouds();
        updateAmogusPositions();
        repaint();
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –≥–æ–Ω–∫–∏ (–º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–ª–∞–≤–∏—à–∏)
    public void resetRace() {
        createAmogusTeam();
        repaint();
    }
}